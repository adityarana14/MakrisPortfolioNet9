@page "/register"
@inject MakrisPortfolio.Client.Services.AuthService Auth
@inject NavigationManager Nav

<h1>Create account</h1>

<EditForm Model="@model" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(serverError))
    {
        <div class="card" style="border-color:#fecaca;background:#fef2f2;color:#7f1d1d;margin-bottom:.75rem">
            <strong>We couldnâ€™t create your account:</strong>
            <div>@serverError</div>
        </div>
    }

    <div class="card" style="max-width:520px">
        <div>
            <label>Email</label>
            <InputText class="input" @bind-Value="model.Email" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>

        <div style="margin-top:.6rem">
            <label>Display name (optional)</label>
            <InputText class="input" @bind-Value="model.DisplayName" />
        </div>

        <div style="margin-top:.6rem">
            <label>Password</label>
            <InputText class="input" type="password" @bind-Value="model.Password" />
            <ValidationMessage For="@(() => model.Password)" />
            <p style="color:#64748b;margin:.35rem 0 0">
                At least 8 characters with an uppercase letter. (Server will enforce.)
            </p>
        </div>

        <div style="margin-top:.6rem">
            <label>Confirm password</label>
            <InputText class="input" type="password" @bind-Value="model.Confirm" />
            <ValidationMessage For="@(() => model.Confirm)" />
        </div>

        <div style="display:flex;gap:.6rem;margin-top:.8rem">
            <button class="btn primary" type="submit">Create account</button>
            <NavLink class="btn" href="/login">Have an account? Log in</NavLink>
        </div>
    </div>
</EditForm>

@code {
    private RegisterModel model = new();
    private string? serverError;

    private async Task Submit()
    {
        serverError = null;

        if (model.Password != model.Confirm)
        {
            serverError = "Passwords do not match.";
            return;
        }

        var (ok, message) = await Auth.RegisterAsync(model.Email, model.Password, model.DisplayName);
        if (ok) Nav.NavigateTo("/resources");
        else serverError = message ?? "Registration failed. Please try again.";
    }

    public class RegisterModel
    {
        [Required, EmailAddress] public string Email { get; set; } = string.Empty;

        [Required, StringLength(64, MinimumLength = 8, ErrorMessage = "Use at least 8 characters.")]
        [RegularExpression(@"^(?=.*[A-Z]).{8,}$", ErrorMessage = "Include at least one uppercase letter.")]
        public string Password { get; set; } = string.Empty;

        [Required] public string Confirm { get; set; } = string.Empty;

        [StringLength(64)] public string? DisplayName { get; set; }
    }
}